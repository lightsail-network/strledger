import base64
import binascii

import pytest
from ledgerwallet.client import LedgerClient
from ledgerwallet.transport import Device
from stellar_sdk import Keypair, TransactionEnvelope, Network, Transaction

from strledger import *


class FakeDevice(Device):

    @classmethod
    def enumerate_devices(cls):
        pass

    def write(self, data: bytes):
        pass

    def read(self, timeout: int = 0) -> bytes:
        pass

    def exchange(self, data: bytes, timeout: int = 0) -> bytes:
        pass

    def open(self):
        pass

    def close(self):
        pass


class FakeLedgerClient(LedgerClient):
    def __init__(self, expected_apdu: str):
        self.expected_apdu = expected_apdu
        self.current_apdu = 0
        self.apdu_pairs = self._parse_apdu_pairs(expected_apdu)
        super().__init__(FakeDevice())

    def raw_exchange(self, data: bytes) -> bytes:
        if self.current_apdu >= len(self.apdu_pairs):
            raise IndexError("No more APDU pairs available")

        expected_input, expected_output = self.apdu_pairs[self.current_apdu]
        if data != expected_input:
            raise ValueError(
                f"Unexpected APDU input. Expected: {expected_input.hex()}, Got: {data.hex()}"
            )

        self.current_apdu += 1
        return expected_output

    def _parse_apdu_pairs(self, apdu_data: str) -> list:
        pairs = []
        lines = apdu_data.strip().split("\n")
        for i in range(0, len(lines), 2):
            input_data = lines[i].strip().split("=> ")[1].strip()
            output_data = lines[i + 1].strip().split("<= ")[1].strip()
            pairs.append((bytes.fromhex(input_data), bytes.fromhex(output_data)))
        return pairs


def test_get_app_configuration_hash_signing_disabled():
    apdu_data = """
    => e006000000
    <= 00050401061a9000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_app_info()
    assert resp.version == "5.4.1"
    assert resp.hash_signing_enabled is False
    assert resp.max_data_size == 1562


def test_get_app_configuration_hash_signing_enabled():
    apdu_data = """
    => e006000000
    <= 01050401061a9000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_app_info()
    assert resp.version == "5.4.1"
    assert resp.hash_signing_enabled is True
    assert resp.max_data_size == 1562


def test_get_app_configuration_max_data_size_none():
    apdu_data = """
    => e006000000
    <= 000504019000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_app_info()
    assert resp.version == "5.4.1"
    assert resp.hash_signing_enabled is False
    assert resp.max_data_size is None


def test_get_public_key_without_confirm():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_keypair(0, confirm_on_device=False)
    assert resp == Keypair.from_raw_ed25519_public_key(
        binascii.unhexlify(
            "9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a0"
        )
    )


def test_get_public_key_with_confirm():
    apdu_data = """
    => e00200010d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_keypair(0, confirm_on_device=True)
    assert resp == Keypair.from_raw_ed25519_public_key(
        binascii.unhexlify(
            "9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a0"
        )
    )


def test_get_public_key_rejected():
    apdu_data = """
    => e00200010d038000002c8000009480000000
    <= 6985
    """
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(UserRefusedError):
        StrLedger(client).get_keypair(0, confirm_on_device=True)


def test_sign_hash_hash_signing_enabled():
    apdu_data = """
    => e00800002d038000002c8000009480000000a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616
    <= bd4ddd948dd1b27d92672d968eba50b8822eacebf67142f77eda5c5ee9c569c048c90b074a677470984bb203417e911d5b1d74270c2a82772cb80893fca1d70b9000
    """
    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).sign_hash(
        "a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616", 0
    )
    assert resp == binascii.unhexlify(
        "bd4ddd948dd1b27d92672d968eba50b8822eacebf67142f77eda5c5ee9c569c048c90b074a677470984bb203417e911d5b1d74270c2a82772cb80893fca1d70b"
    )


def test_sign_hash_hash_signing_disabled():
    apdu_data = """
    => e00800002d038000002c8000009480000000a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616
    <= 6c66
    """
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(HashSigningNotEnabledError):
        StrLedger(client).sign_hash(
            "a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616", 0
        )


def test_sign_hash_rejected():
    apdu_data = """
    => e00800002d038000002c8000009480000000a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616
    <= 6985
    """
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(UserRefusedError):
        StrLedger(client).sign_hash(
            "a85c933d37847689825acbdfeb50e66d791814abf03b9be4bd6450abb6c99616", 0
        )


def test_sign_transaction_exceeds_apdu_max():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    => e0040080ff038000002c80000094800000007ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080
    <= 9000
    => e0048080ffc0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e
    <= 9000
    => e0048080ff6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d72633223303939323431336639623035653562666231663837326263653939653839643931323962326536310000000000000000010000000000000001
    <= 9000
    => e00480003c0000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c
    <= 83968afc83b45d0672f5b5259a7bab68ee030f6ffda0c2f3fd550e3b5dd40b3a6bee1f246e760523ab6bd434f9e11f237ffd16bc8f18bb58a59eb94abe1a5a0c9000
    """

    signature_base = "7ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080c0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d726332233039393234313366396230356535626662316638373262636539396538396439313239623265363100000000000000000100000000000000010000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c"
    tx = Transaction.from_xdr(
        base64.b64encode(binascii.unhexlify(signature_base)[36:]).decode()
    )
    te = TransactionEnvelope(tx, Network.PUBLIC_NETWORK_PASSPHRASE)

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).sign_transaction(te, 0)
    assert (
        resp.signatures[0].signature.hex()
        == "83968afc83b45d0672f5b5259a7bab68ee030f6ffda0c2f3fd550e3b5dd40b3a6bee1f246e760523ab6bd434f9e11f237ffd16bc8f18bb58a59eb94abe1a5a0c"
    )


def test_sign_transaction_not_exceeds_apdu_max():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    => e0040000ad038000002c80000094800000007ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000a5c7ded11a85de73af22a693a1c4756624415ac30cfb8f2b1de887ab8771d70a00000064000000000000000100000001000000000000000000000000000000000000000000000001000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000
    <= 63f497fda269df083a0347ac565b9076c0c0bfac6c12788108020bcde2eb7206ba51c359b83e1f0a7a34041074a67c7f1394da67bc8775a3020be257ccc7100e9000
    """

    signature_base = "7ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000a5c7ded11a85de73af22a693a1c4756624415ac30cfb8f2b1de887ab8771d70a00000064000000000000000100000001000000000000000000000000000000000000000000000001000000000000000500000000000000000000000000000000000000000000000000000000000000000000000000000000"
    tx = Transaction.from_xdr(
        base64.b64encode(binascii.unhexlify(signature_base)[36:]).decode()
    )
    te = TransactionEnvelope(tx, Network.PUBLIC_NETWORK_PASSPHRASE)

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).sign_transaction(te, 0)
    assert (
        resp.signatures[0].signature.hex()
        == "63f497fda269df083a0347ac565b9076c0c0bfac6c12788108020bcde2eb7206ba51c359b83e1f0a7a34041074a67c7f1394da67bc8775a3020be257ccc7100e"
    )


def test_sign_transaction_data_too_large():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    => e0040080ff038000002c80000094800000007ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080
    <= 9000
    => e0048080ffc0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e
    <= 9000
    => e0048080ff6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d72633223303939323431336639623035653562666231663837326263653939653839643931323962326536310000000000000000010000000000000001
    <= 9000
    => e00480003c0000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c
    <= b004
    """

    signature_base = "7ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080c0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d726332233039393234313366396230356535626662316638373262636539396538396439313239623265363100000000000000000100000000000000010000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c"
    tx = Transaction.from_xdr(
        base64.b64encode(binascii.unhexlify(signature_base)[36:]).decode()
    )
    te = TransactionEnvelope(tx, Network.PUBLIC_NETWORK_PASSPHRASE)

    client = FakeLedgerClient(apdu_data)
    with pytest.raises(RequestDataTooLargeError):
        StrLedger(client).sign_transaction(te, 0)


def test_sign_transaction_parsed_data_failed():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    => e0040080ff038000002c80000094800000007ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080
    <= 9000
    => e0048080ffc0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e
    <= 9000
    => e0048080ff6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d72633223303939323431336639623035653562666231663837326263653939653839643931323962326536310000000000000000010000000000000001
    <= 9000
    => e00480003c0000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c
    <= b005
    """

    signature_base = "7ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080c0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d726332233039393234313366396230356535626662316638373262636539396538396439313239623265363100000000000000000100000000000000010000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c"
    tx = Transaction.from_xdr(
        base64.b64encode(binascii.unhexlify(signature_base)[36:]).decode()
    )
    te = TransactionEnvelope(tx, Network.PUBLIC_NETWORK_PASSPHRASE)

    client = FakeLedgerClient(apdu_data)
    with pytest.raises(DataParsingFailedError):
        StrLedger(client).sign_transaction(te, 0)


def test_sign_transaction_rejected():
    apdu_data = """
    => e00200000d038000002c8000009480000000
    <= 9a222500cf47b03d05edec04ed3294cece1de727ccadb401f47d6b4b230e81a09000
    => e0040080ff038000002c80000094800000007ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080
    <= 9000
    => e0048080ffc0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e
    <= 9000
    => e0048080ff6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d72633223303939323431336639623035653562666231663837326263653939653839643931323962326536310000000000000000010000000000000001
    <= 9000
    => e00480003c0000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c
    <= 6985
    """

    signature_base = "7ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000200000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd000071d7002d9fed000000010000000000000000000000010000000100000000e93388bbfd2fbd11806dd0bd59cea9079e7cc70ce7b1e154f114cdfe4e466ecd00000018000000020000024c0061736d0100000001150460027e7e017e60037e7e7e017e6000017e600000021904016c01300000016c01310000016c015f0001016c013800000305040203030305030100100619037f01418080c0000b7f00418080c0000b7f00418080c0000b073505066d656d6f7279020009696e6372656d656e740004015f00070a5f5f646174615f656e6403010b5f5f686561705f6261736503020aa70104920102017f017e41002100024002400240428ebad0af86d43942021080808080004201520d00428ebad0af86d4394202108180808000220142ff01834204520d012001422088a721000b200041016a2200450d01428ebad0af86d4392000ad422086420484220142021082808080001a4284808080a0064284808080c00c1083808080001a20010f0b00000b108580808000000b0900108680808000000b040000000b02000b00730e636f6e74726163747370656376300000000000000040496e6372656d656e7420696e6372656d656e747320616e20696e7465726e616c20636f756e7465722c20616e642072657475726e73207468652076616c75652e00000009696e6372656d656e74000000000000000000000100000004001e11636f6e7472616374656e766d657461763000000000000000140000003900730e636f6e74726163746d65746176300000000000000005727376657200000000000006312e37332e3000000000000000000008727373646b7665720000003332302e302e302d726332233039393234313366396230356535626662316638373262636539396538396439313239623265363100000000000000000100000000000000010000000713e16858bde4ab50a006dbf07172288f3ec19d8640d1a853016c60c15c2511170000000000186636000002b000000000000000000000000c"
    tx = Transaction.from_xdr(
        base64.b64encode(binascii.unhexlify(signature_base)[36:]).decode()
    )
    te = TransactionEnvelope(tx, Network.PUBLIC_NETWORK_PASSPHRASE)

    client = FakeLedgerClient(apdu_data)
    with pytest.raises(UserRefusedError):
        StrLedger(client).sign_transaction(te, 0)


def test_sign_soroban_authorization_exceeds_apdu_max():
    apdu_data = """
    => e00a0080ff038000002c8000009480000000000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55
    <= 9000
    => e00a8080ffa8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079
    <= 9000
    => e00a800037a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000
    <= 2e45c6d44fe613c3d7b38c9f7147bd70dc58cf7e1badb80d33632dcdafb90944674096da05dfe0f185da86535a6ca1a1fcef852a19ae99b22e4438ca5c43b9089000
    """

    data = binascii.unhexlify(
        "000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000"
    )
    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).sign_soroban_authorization(data, 0)
    assert (
        resp.hex()
        == "2e45c6d44fe613c3d7b38c9f7147bd70dc58cf7e1badb80d33632dcdafb90944674096da05dfe0f185da86535a6ca1a1fcef852a19ae99b22e4438ca5c43b908"
    )


def test_sign_soroban_authorization_not_exceeds_apdu_max():
    apdu_data = """
    => e00a0000b5038000002c800000948000000000000009cee0302d59844d32bdca915c8203dd44b33fbb7edc19051ea37abedf28ecd4720000000049756d450210c89f0000000100000000000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac6b94c9a46de226f6f54de22d8a2a12ca735fb79a2b3b4c8934cbff7bc2ea407900000000563636d4a195efc89a7d9c738607ff0e47297d1fb1c6414f7a0e0be8d02f9ddf00000000
    <= 851dcb8e53a2e64959358e1f110c00ebbc7f9bbd71c5476d45ec591170ebe40d9eacbbcdb29a1c7ab31faaa3c1175d5f569eea52b6149cf0f6ddd85c8b3262009000
    """

    data = binascii.unhexlify(
        "00000009cee0302d59844d32bdca915c8203dd44b33fbb7edc19051ea37abedf28ecd4720000000049756d450210c89f0000000100000000000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac6b94c9a46de226f6f54de22d8a2a12ca735fb79a2b3b4c8934cbff7bc2ea407900000000563636d4a195efc89a7d9c738607ff0e47297d1fb1c6414f7a0e0be8d02f9ddf00000000"
    )
    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).sign_soroban_authorization(data, 0)
    assert (
        resp.hex()
        == "851dcb8e53a2e64959358e1f110c00ebbc7f9bbd71c5476d45ec591170ebe40d9eacbbcdb29a1c7ab31faaa3c1175d5f569eea52b6149cf0f6ddd85c8b326200"
    )


def test_sign_soroban_authorization_data_too_large():
    apdu_data = """
    => e00a0080ff038000002c8000009480000000000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55
    <= 9000
    => e00a8080ffa8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079
    <= b004
    """

    data = binascii.unhexlify(
        "000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000"
    )
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(RequestDataTooLargeError):
        StrLedger(client).sign_soroban_authorization(data, 0)


def test_sign_soroban_authorization_parsed_data_failed():
    apdu_data = """
    => e00a0080ff038000002c8000009480000000000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55
    <= 9000
    => e00a8080ffa8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079
    <= 9000
    => e00a800037a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000
    <= b005
    """

    data = binascii.unhexlify(
        "000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000"
    )
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(DataParsingFailedError):
        StrLedger(client).sign_soroban_authorization(data, 0)


def test_sign_soroban_authorization_rejected():
    apdu_data = """
    => e00a0080ff038000002c8000009480000000000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55
    <= 9000
    => e00a8080ffa8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079
    <= 9000
    => e00a800037a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000
    <= 6985
    """

    data = binascii.unhexlify(
        "000000097ac33997544e3175d266bd022439b22cdb16508c01163f26e5cb2a3e1045a9790000000049756d450210c89f0000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000020000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a00000000000000000000000269440500000000000000000000000001d7928b72c2703ccfeaf7eb9ff4ef4d504a55a8b979fc9b450ea2c842b4d1ce61000000087472616e7366657200000003000000120000000000000000acd0adc778238000bdb6bad22e919923897f7a87e310cef1505e6c0b0b71542500000012000000000000000079a5a13baf5571637a2157c6affb7491d7c4454eecd2b0b7e40e67023f096fac0000000a0000000000000000000000026944050000000000"
    )
    client = FakeLedgerClient(apdu_data)
    with pytest.raises(UserRefusedError):
        StrLedger(client).sign_soroban_authorization(data, 0)


def test_no_default_path():
    apdu_data = """
    => e00200000d038000002c8000009480004d3d
    <= 04becf1537ae24f24d326368a2ad8a09b06cb0671e96e6878d4e623aab4bf6e79000
    """

    client = FakeLedgerClient(apdu_data)
    resp = StrLedger(client).get_keypair(19773, confirm_on_device=False)
    assert resp == Keypair.from_raw_ed25519_public_key(
        binascii.unhexlify(
            "04becf1537ae24f24d326368a2ad8a09b06cb0671e96e6878d4e623aab4bf6e7"
        )
    )
